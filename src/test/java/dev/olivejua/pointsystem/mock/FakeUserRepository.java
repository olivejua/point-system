package dev.olivejua.pointsystem.mock;

import dev.olivejua.pointsystem.user.domain.User;
import dev.olivejua.pointsystem.user.service.port.UserRepository;
import lombok.Builder;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

@Builder
public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0); //TODO test환경은 싱글스레드환경이라 동시성이슈를 고려할필요가 없다고 했는데 왜 AtomicLong으로 타입 정의를 하는거지?
    private final List<User> data = new ArrayList<>();

    @Override
    public User getById(long id) {
        return data.stream()
                .filter(user -> user.getId() == id)
                .findAny()
                .get();
    }

    @Override
    public Optional<User> findById(long id) {
        return data.stream()
                .filter(user -> user.getId() == id)
                .findFirst();
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream()
                .filter(user -> user.getEmail().equals(email))
                .findFirst();
    }

    @Override
    public boolean existsByEmail(String email) {
        return data.stream()
                .anyMatch(user -> user.getEmail().equals(email));
    }

    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .status(user.getStatus())
                    .createdAt(user.getCreatedAt())
                    .modifiedAt(user.getModifiedAt())
                    .build();

            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> user.getId().equals(item.getId()));
            data.add(user);
            return user;
        }
    }
}
